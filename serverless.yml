service: workshop-${self:custom.name}

plugins:
  - serverless-export-env
  - serverless-pseudo-parameters
  - serverless-api-gateway-throttling
  #- serverless-api-stage

custom:
  name: garycraine
  email: gary.craine@gmail.com
  # Configures throttling settings for all http endpoints
  apiGatewayThrottling:
    maxRequestsPerSecond: 1000
    maxConcurrentRequests: 500  
  
provider:
  name: aws
  runtime: nodejs12.x
  environment:
    serviceName: ${self:service}
    stage: ${self:provider.stage}
  apiGateway:
    metrics: true

  iamRoleStatements:
    - Effect: Allow
      Action: dynamodb:scan
      Resource: !GetAtt RestaurantsTable.Arn
    - Effect: Allow
      Action: execute-api:Invoke
      Resource: arn:aws:execute-api:#{AWS::Region}:#{AWS::AccountId}:#{ApiGatewayRestApi}/${self:provider.stage}/GET/restaurants
    - Effect: Allow
      Action: ssm:GetParameters*
      Resource:
        - arn:aws:ssm:#{AWS::Region}:#{AWS::AccountId}:parameter/${self:service}/${self:provider.stage}/get-restaurants/config
        - arn:aws:ssm:#{AWS::Region}:#{AWS::AccountId}:parameter/${self:service}/${self:provider.stage}/get-restaurants/secretString
        - arn:aws:ssm:#{AWS::Region}:#{AWS::AccountId}:parameter/${self:service}/${self:provider.stage}/search-restaurants/config
    - Effect: Allow
      Action: kms:Decrypt
      Resource: ${ssm:/dev/kmsArn}              

functions:
  get-index:
    handler: functions/get-index.handler
    events:
      - http:
          path: /
          method: get
          throttling:
            maxRequestsPerSecond: 10
            maxConcurrentRequests: 5
    environment:
      restaurants_api: 
        #https://#{ApiGatewayRestApi}.execute-api.#{AWS::Region}.amazonaws.com/${self:provider.stage}/restaurants
        Fn::Join:
        - ""
        - - https://
          - !Ref ApiGatewayRestApi
          - .execute-api.${self:provider.region}.amazonaws.com/${self:provider.stage}/restaurants

      cognito_user_pool_id: !Ref CognitoUserPool
      cognito_client_id: !Ref WebCognitoUserPoolClient

  get-restaurants:
    handler: functions/get-restaurants.handler
    events:
      - http:
          path: /restaurants
          method: get
          authorizer: aws_iam
          throttling:
            maxRequestsPerSecond: 10
            maxConcurrentRequests: 5
    environment:
      restaurants_table: !Ref RestaurantsTable
  
  search-restaurants:
    handler: functions/search-restaurants.handler
    events:
      - http:
          path: /restaurants/search
          method: post
          authorizer:
            name: CognitoAuthorizer
            type: COGNITO_USER_POOLS
            arn: !GetAtt CognitoUserPool.Arn
          throttling:
            maxRequestsPerSecond: 10
            maxConcurrentRequests: 5  
    environment:
      restaurants_table: !Ref RestaurantsTable

resources:
  Resources:
    RestaurantsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        BillingMode: PAY_PER_REQUEST
        AttributeDefinitions:
          - AttributeName: name
            AttributeType: S
        KeySchema:
          - AttributeName: name
            KeyType: HASH
    
    ServiceUrlParameter:
      Type: AWS::SSM::Parameter
      Properties:
        Type: String
        Name: /${self:service}/${self:provider.stage}/serviceUrl
        Value:
          Fn::Join:
            - ""
            - - https://
              - !Ref ApiGatewayRestApi
              - .execute-api.${self:provider.region}.amazonaws.com/${self:provider.stage}

    EventBus:
      Type: AWS::Events::EventBus
      Properties:
        Name: order_events_${self:provider.stage}

    CognitoUserPool:
      Type: AWS::Cognito::UserPool
      Properties:
        AliasAttributes:
          - email
        UsernameConfiguration:
          CaseSensitive: false
        AutoVerifiedAttributes:
          - email
        Policies:
          PasswordPolicy:
            MinimumLength: 8
            RequireLowercase: true
            RequireNumbers: true
            RequireUppercase: true
            RequireSymbols: true
        Schema:
          - AttributeDataType: String
            Mutable: true
            Name: given_name
            Required: true
            StringAttributeConstraints:
              MinLength: '1'
          - AttributeDataType: String
            Mutable: true
            Name: family_name
            Required: true
            StringAttributeConstraints:
              MinLength: '1'
          - AttributeDataType: String
            Mutable: true
            Name: email
            Required: true
            StringAttributeConstraints:
              MinLength: '1'            
    
    WebCognitoUserPoolClient:
      Type: AWS::Cognito::UserPoolClient
      Properties:
        ClientName: web
        UserPoolId: !Ref CognitoUserPool
        ExplicitAuthFlows:
          - ALLOW_USER_SRP_AUTH
          - ALLOW_REFRESH_TOKEN_AUTH
        PreventUserExistenceErrors: ENABLED    
    
    ServerCognitoUserPoolClient:
      Type: AWS::Cognito::UserPoolClient
      Properties:
        ClientName: server
        UserPoolId: !Ref CognitoUserPool
        ExplicitAuthFlows:
          - ALLOW_ADMIN_USER_PASSWORD_AUTH
          - ALLOW_REFRESH_TOKEN_AUTH
        PreventUserExistenceErrors: ENABLED
  
  Outputs:
    RestApiUrl:
      Value: 
        Fn::Join:
          - ""
          - - https://
            - !Ref ApiGatewayRestApi
            - .execute-api.${self:provider.region}.amazonaws.com/${self:provider.stage}
    
    RestaurantsTableName:
      Value: !Ref RestaurantsTable
    
    CognitoUserPoolId:
      Value: !Ref CognitoUserPool

    CognitoUserPoolArn:
      Value: !GetAtt CognitoUserPool.Arn

    CognitoUserPoolWebClientId:
      Value: !Ref WebCognitoUserPoolClient

    CognitoUserPoolServerClientId:
      Value: !Ref ServerCognitoUserPoolClient

    EventBusName:
      Value: !Ref EventBus
 



 